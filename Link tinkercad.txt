https://www.tinkercad.com/things/hZZTuDsrtvJ-senales

1er Avance: Se implemento el modelo de Arduino con sus respectivas conexiones a un generador de señales, pantalla lcd y dos pulsadores. Falta configurar los pulsadores

2do Avance: Se configuraron correctamente todos los componentes, ahora solo faltan las funciones respectivas para hallar los valores correspondientes.

3er Avance: Se hizo la función que inicializa un puntero en memoria dinámica con un arreglo que contiene 500 valores tomados a través del pin analógico luego de ser pulsado el segundo pulsador.

4to Avance: Se hizo la función que hallaba el valor medio, es decir el punto medio entre el máximo y el mínimo, para así poder hallar la amplitud en base al valor
medio, ya que al restar el valor máximo menos el valor medio se obtiene un aproximado de la amplitud pico, esta al multiplicarse por dos nos da un aproximado
de la amplitud pico a pico y ya con una formula pasamos a voltaje.

5to Avance: Se hizo la función que hallaba la frecuencia. En este punto me di cuenta que tenia un problema y era que no tenia contabilizado el tiempo en ningún momento
y para la formula de la frecuencia que había encontrado necesitaba saber cuanto tiempo tardaba en tomar los 500 valores de muestra que estaba tomando luego de que
el usuario presionara el segundo pulsador, para esto me toco devolverme a la función de toma de muestras (valores recibidos a través del pin analógico) y utilizar 
la función micros() la cual funciona como un contabilizador en microsegundos, utilizando esta llegue al tiempo total que tomaba en llenar el arreglo, este tiempo
total se divide por el numero de muestras para hallar el promedio que toma Arduino en almacenar cada valor en el arreglo. En base a estos valores hayamos la frecuencia
con una formula encontrada.
​
Algoritmo hasta el momento.

Incluyo la evolución del algoritmo ya que no se puede modificar el informe ya que la entrega era el sábado 14 de septiembre
 
#include <LiquidCrystal.h>

// Inicialización del LCD
LiquidCrystal lcd(4, 5, 6, 7, 8, 9);
const int analogPin = 0;   // Pin de entrada analógica
const int cantidadMuestras = 500;
const int pulsador1 = 2;    // Primer pulsador
const int pulsador2 = 3;    // Segundo pulsador
int estadoPulsador1 = 0;
int estadoPulsador2 = 0;
int ultimoEstadoPulsador1 = 0;
bool lecturaActiva = false; // Estado de lectura (iniciar o detener)
int val = 0;

void setup()
{
  pinMode(pulsador1, INPUT); //Inicializacon de los pulsadores
  pinMode(pulsador2, INPUT);
  lcd.begin(16, 2);         //Inicialización del LCD con 16 columnas y 2 filas
  Serial.begin(9600);       //Inicialización de la comunicación serial
}

void loop()
{
  //Leer el estado del primer pulsador
  estadoPulsador1 = digitalRead(pulsador1);

  //Detectar si se presionó el primer pulsador (cambio de LOW a HIGH)
  if(estadoPulsador1 == HIGH && ultimoEstadoPulsador1 == LOW){
    lecturaActiva = !lecturaActiva;  // Alternar entre iniciar y detener la lectura
  }

  //Si lecturaActiva es true, leer y mostrar los valores analógicos
  if(lecturaActiva == true){
    val = analogRead(analogPin);
    Serial.println(val);  // Mostrar el valor en el monitor serial
  }

  //Leer el estado del segundo pulsador
  estadoPulsador2 = digitalRead(pulsador2);

  //Si el segundo pulsador es presionado mientras la lectura está activa, imprimir en el LCD
  if(estadoPulsador2 == HIGH && lecturaActiva == true){
    //Asignar memoria dinámicamente para las muestras
    int *muestras = new int[cantidadMuestras];
    //Capturar las muestras de la señal
    unsigned long *intervaloMuestra = new unsigned long; //Puntero para almacenar el tiempo que toma entre cada valor
    capturarValores(muestras, cantidadMuestras, intervaloMuestra);
    int *valorMinimo = new int; //Punteros para almacenar minimo y maximo que seran hallados dentro de la función
    int *valorMaximo = new int;    
    //Se invocan las funciones que hallan la amplitud y la frecuencia
    float valorMedio = calcularValorMedio(muestras, cantidadMuestras, valorMinimo, valorMaximo);
    float voltaje = calcularAmplitud(valorMedio, valorMaximo);
    float frecuencia = calcularFrecuencia(muestras, cantidadMuestras, valorMedio, intervaloMuestra);
       
    lcd.print("Am = 6Hz Fr = 6v");      //Imprimir mensaje en la primera línea
    lcd.setCursor(0, 1);                //Mover el cursor a la segunda línea
    lcd.print("Onda: ");                //Imprimir el mensaje en la segunda línea
    
    //Se libera el espacio en memoria dinamica ocupada por los punteros
    delete[] muestras;
    delete valorMinimo;
    delete valorMaximo;
    delete intervaloMuestra;
    delay(5000);                        //Mantener el mensaje durante 5 segundos
    lcd.clear();                        //Limpiar el LCD después de los 5 segundos
  }

  //Actualizar el último estado del primer pulsador para la siguiente iteración
  ultimoEstadoPulsador1 = estadoPulsador1;
}

void capturarValores(int *arreglo, int longitud, unsigned long *intervaloMuestra){
  Serial.println("Entra en la funcion");
  unsigned long tiempoInicio = micros(); //Almacenar el tiempo inicial
  for(int i = 0; i < longitud; i++){    
    arreglo[i] = analogRead(analogPin);
    Serial.println(arreglo[i]);
  }
  unsigned long tiempoFin = micros();  //Almacenar el tiempo final
  unsigned long tiempoTotal = tiempoFin - tiempoInicio;
  *intervaloMuestra = tiempoTotal / longitud; 
  Serial.print("El tiempo entre cada muestra es: ");
  Serial.println(*intervaloMuestra);
  Serial.println("Termina en la funcion");
}

float calcularValorMedio(int *arreglo, int longitud, int *valorMinimo, int *valorMaximo){
  float valorMedio = 0;
  *valorMaximo = arreglo[0];
  *valorMinimo = arreglo[0];
  for(int i = 1; i < longitud; i++){
    if(arreglo[i] > *valorMaximo){
      *valorMaximo = arreglo[i];
    }
    if(arreglo[i] < *valorMinimo){
      *valorMinimo = arreglo[i];
    }
  }
  valorMedio = (*valorMaximo + *valorMinimo) / 2.0;
  return valorMedio;
}

float calcularAmplitud(float valorMedio, int *valorMaximo){
	float valorAmplitud = (*valorMaximo - valorMedio)*2;
  	Serial.print("Amplitud pico a pico = ");
  	Serial.println(valorAmplitud);
  	float voltaje = (valorAmplitud/1023)*5.1;
  	Serial.print("Amplitud pico a pico en Voltaje = ");
  	Serial.print(voltaje);
  	Serial.println("V");
	return voltaje;
}

float calcularFrecuencia(int *arreglo, int longitud, int valorMedio, unsigned long *intervaloMuestra){
  int crucesValorMedio = 0;
  float frecuencia = 0;
  unsigned long intervalo = *intervaloMuestra;
  for(int i = 1; i < longitud; i++){
      if((arreglo[i-1] > valorMedio && arreglo[i] <= valorMedio) || (arreglo[i-1] < valorMedio && arreglo[i] >= valorMedio)){
          crucesValorMedio++;
      }
  }
  frecuencia = (crucesValorMedio) / ((2*((longitud)*(intervalo)))/1000000);
  Serial.print("La frecuencia es: ");
  Serial.print(frecuencia);
  Serial.println("Hz");
  return frecuencia;
}